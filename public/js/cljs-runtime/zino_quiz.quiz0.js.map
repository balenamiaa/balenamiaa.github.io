{"version":3,"sources":["zino_quiz/quiz0.cljs"],"mappings":"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","names":["zino-quiz.quiz0/set-cookie!","name","value","days","date","js/Date","expires","js/document","zino-quiz.quiz0/get-cookie","cljs.core/re-find","cljs.core/re-pattern","clojure.edn.read_string","js/decodeURIComponent","cljs.core/second","js/zino-quiz","js/zino-quiz.quiz0","js/zino-quiz.quiz0.state","zino-quiz.quiz0/state","reagent.core.atom","or__5002__auto__","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_","zino-quiz.quiz0/option-component","question-index","option-key","option-text","correct-answer","selected?","cljs.core._EQ_","cljs.core/deref","cljs.core.get_in","correct?","answered?","cljs.core/contains?","show-explanation?","cljs.core.swap_BANG_","cljs.core/update","answers","cljs.core.get","cljs.core.dissoc","cljs.core.assoc","e","cljs.core/update-in","cljs.core/not","zino-quiz.quiz0-data/quiz-data","zino-quiz.quiz0/question-component","index","question","markers","cljs.core.disj","cljs.core.conj","fexpr__13051","iter__5480__auto__","s__13053","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__13055","cljs.core/chunk-buffer","i__13054","vec__13056","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13052","cljs.core/chunk-rest","vec__13059","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","zino-quiz.quiz0/score-component","total-questions","answered-questions","correct-answers","cljs.core.filter","p__13062","vec__13063","answer","p1__13066#","p1__13067#","zino-quiz.quiz0/navigation-component","q","js/parseInt","cljs.core/assoc","s__13069","b__13071","i__13070","iter__13068","marker","cljs.core.sort","zino-quiz.quiz0/quiz-app","s__13073","b__13075","i__13074","vec__13076","iter__13072","vec__13079","cljs.core.map_indexed","cljs.core/vector","cljs.core/chunk-first"],"sourcesContent":["(ns zino-quiz.quiz0\r\n  (:require [reagent.core :as r]\r\n            [reagent.dom :as dom]\r\n            [zino-quiz.quiz0-data :refer [quiz-data]]\r\n            [goog.string :as gstring]\r\n            [goog.string.format]\r\n            [clojure.edn :as edn]))\r\n\r\n(defn set-cookie! [name value days]\r\n  (let [date (js/Date.)]\r\n    (.setTime date (+ (.getTime date) (* days 24 60 60 1000)))\r\n    (let [expires (str \"expires=\" (.toUTCString date))]\r\n      (set! (.-cookie js/document) (str name \"=\" value \";\" expires \";path=/\"))))\r\n  value)\r\n\r\n(defn get-cookie [name]\r\n  (let [value (re-find (re-pattern (str \"(?:^|;\\\\s*)\" name \"=([^;]*)\")) (.-cookie js/document))]\r\n    (if value (edn/read-string (js/decodeURIComponent (second value))) nil)))\r\n\r\n(defonce state (r/atom {:answers (or (get-cookie \"quiz-answers\") {})\r\n                        :show-explanations {}\r\n                        :markers (or (get-cookie \"quiz-markers\") #{})\r\n                        :current-question 0}))\r\n\r\n(add-watch state :cookie-saver\r\n           (fn [_ _ old-state new-state]\r\n             (when (not= (:answers old-state) (:answers new-state))\r\n               (set-cookie! \"quiz-answers\" (:answers new-state) 30))\r\n             (when (not= (:markers old-state) (:markers new-state))\r\n               (set-cookie! \"quiz-markers\" (:markers new-state) 30))))\r\n\r\n(defn option-component [question-index option-key option-text correct-answer]\r\n  (let [selected? (= option-key (get-in @state [:answers question-index]))\r\n        correct? (= option-key correct-answer)\r\n        answered? (contains? (:answers @state) question-index)\r\n        show-explanation? (get-in @state [:show-explanations question-index option-key])]\r\n    [:div.option\r\n     {:class [(when selected? \"selected\")\r\n              (when (and answered? selected? correct?) \"correct\")\r\n              (when (and answered? selected? (not correct?)) \"incorrect\")]\r\n      :on-click #(swap! state update :answers\r\n                        (fn [answers]\r\n                          (if (= (get answers question-index) option-key)\r\n                            (dissoc answers question-index)\r\n                            (assoc answers question-index option-key))))}\r\n     [:div.option-content\r\n      [:div.option-text\r\n       [:span.option-key (str option-key)]\r\n       [:span option-text]]\r\n      [:button.explanation-toggle\r\n       {:on-click (fn [e]\r\n                    (.stopPropagation e)\r\n                    (swap! state update-in [:show-explanations question-index option-key] not))}\r\n       (if show-explanation? \"\u2212\" \"+\")]]\r\n     (when show-explanation?\r\n       [:div.explanation\r\n        (get-in quiz-data [question-index :explanation option-key])])]))\r\n\r\n(defn question-component [index question]\r\n  [:div.question-container\r\n   {:id (str \"question-\" index)}\r\n   [:div.question-header\r\n    [:h3.question-text (str (inc index) \". \" (:question question))]\r\n    [:button.marker-toggle\r\n     {:on-click #(swap! state update :markers (fn [markers]\r\n                                                (if (markers index)\r\n                                                  (disj markers index)\r\n                                                  (conj markers index))))}\r\n     (if ((:markers @state) index) \"\u2605\" \"\u2606\")]]\r\n   [:div.options\r\n    (for [[k v] (:options question)]\r\n      ^{:key k} [option-component index k v (:answer question)])]])\r\n\r\n(defn score-component []\r\n  (let [total-questions (count quiz-data)\r\n        answered-questions (count (:answers @state))\r\n        correct-answers (count (filter (fn [[index answer]]\r\n                                         (= answer (:answer (nth quiz-data index))))\r\n                                       (:answers @state)))]\r\n    [:div.score-container\r\n     [:h2 \"Progress\"]\r\n     [:div.progress-bar\r\n      [:div.progress {:style {:width (str (* 100 (/ answered-questions total-questions)) \"%\")}}]]\r\n     [:p (str correct-answers \" / \" answered-questions \" correct\" \" (\" total-questions \" total questions)\")]]))\r\n\r\n(defn navigation-component []\r\n  [:div.navigation\r\n   [:input.question-jump\r\n    {:type \"number\"\r\n     :min 1\r\n     :max (count quiz-data)\r\n     :placeholder \"Go to question number...\"\r\n     :on-change #(let [q (js/parseInt (.. % -target -value))]\r\n                   (when (and (>= q 1) (<= q (count quiz-data)))\r\n                     (swap! state assoc :current-question (dec q))\r\n                     (.scrollIntoView (.getElementById js/document (str \"question-\" (dec q))) #js {:behavior \"smooth\"})))}]\r\n   [:select.marker-jump\r\n    {:on-change #(let [index (js/parseInt (.. % -target -value))]\r\n                   (swap! state assoc :current-question index)\r\n                   (.scrollIntoView (.getElementById js/document (str \"question-\" index)) #js {:behavior \"smooth\"}))}\r\n    [:option {:value \"\"} \"Jump to marker\"]\r\n    (for [marker (sort (:markers @state))]\r\n      ^{:key marker} [:option {:value marker} (str \"Question \" (inc marker))])]])\r\n\r\n(defn ^:export quiz-app []\r\n  [:div.quiz-app\r\n   [score-component]\r\n   [navigation-component]\r\n   [:div.questions-list\r\n    (for [[index question] (map-indexed vector quiz-data)]\r\n      ^{:key index} [question-component index question])]])\r\n"]}